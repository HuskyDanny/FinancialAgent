name: Dev Environment Deploy

on:
  push:
    branches: [main]
    paths:
    - 'backend/**'
    - 'frontend/**'
    - '.pipeline/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  AKS_CLUSTER_NAME: FinancialAgent-AKS
  AKS_RESOURCE_GROUP: FinancialAgent
  NAMESPACE: financial-agent-dev

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Backend Tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=src --cov-report=xml

    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Lint Backend
      run: |
        cd backend
        black --check src tests
        ruff check src tests

    - name: Lint Frontend
      run: |
        cd frontend
        npm run lint
        npm run type-check

  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: test
    outputs:
      backend-image: ${{ steps.backend.outputs.image }}
      frontend-image: ${{ steps.frontend.outputs.image }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Backend
      id: backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/financial-agent/backend:dev-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/financial-agent/backend:dev-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend
      id: frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/financial-agent/frontend:dev-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/financial-agent/frontend:dev-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AKS Dev
    runs-on: ubuntu-latest
    needs: build
    environment: dev
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Update image tags
      run: |
        cd .pipeline/k8s/overlays/dev
        kustomize edit set image \
          financial-agent/backend=${{ env.REGISTRY }}/${{ github.repository_owner }}/financial-agent/backend:dev-${{ github.sha }} \
          financial-agent/frontend=${{ env.REGISTRY }}/${{ github.repository_owner }}/financial-agent/frontend:dev-${{ github.sha }}

    - name: Deploy to AKS
      run: |
        # Apply the deployment
        kubectl apply -k .pipeline/k8s/overlays/dev

        # Wait for deployments to be ready
        kubectl rollout status deployment/backend -n ${{ env.NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Verify deployment
      run: |
        echo "üéØ Deployment Status:"
        kubectl get pods -n ${{ env.NAMESPACE }}

        echo "üì° Services:"
        kubectl get services -n ${{ env.NAMESPACE }}

        echo "üîç Service endpoints:"
        kubectl get service frontend-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "LoadBalancer IP pending..."

    - name: Health Check
      run: |
        # Wait a bit for services to be ready
        sleep 30

        # Check backend health
        kubectl exec -n ${{ env.NAMESPACE }} deployment/backend -- curl -f http://localhost:8000/health || echo "Backend health check failed"

        # Check frontend
        kubectl exec -n ${{ env.NAMESPACE }} deployment/frontend -- curl -f http://localhost:3000/ || echo "Frontend health check failed"